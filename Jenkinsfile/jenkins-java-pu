pipeline {
    agent any

    environment {
        APP_NAME = "itc-fmcg"
        DOCKER_USR = "devopsawsr"
        GIT_COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        RELEASE = "${env.BUILD_NUMBER}-${GIT_COMMIT_HASH}"
        IMAGE_TAG = "${RELEASE}-${new Date().format('yyyyMMdd-HHmmss')}"
    }

    stages {
        stage("Git Checkout") {
            steps {
                checkout scm
            }
        }
        stage("Build Image") {
            steps {
                script {
                    sh "docker build -t ${DOCKER_USR}/${APP_NAME}:${IMAGE_TAG} ."
                }
            }
        }
        stage("Scan Docker Image") {
            steps {
                script {
                    def trivyOutput = sh(script: "trivy image ${DOCKER_USR}/${APP_NAME}:${IMAGE_TAG}", returnStdout: true).trim()
                    echo trivyOutput

                    if (trivyOutput.contains("Total: 0")) {
                        echo "No vulnerabilities found in the Docker image."
                    } else {
                        echo "Vulnerabilities found in the Docker image."
                        // error "Vulnerabilities found in the Docker image."
                    }
                }
            }
        }
        stage("Push Image") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    script {
                        // Using echo without interpolating secrets
                        echo "DOCKER_USR: ${DOCKER_USR}"
                        echo "APP_NAME: ${APP_NAME}"
                        echo "IMAGE_TAG: ${IMAGE_TAG}"

                        sh "docker images"

                        // Use single quotes to avoid interpolation and securely handle credentials
                        sh '''
                            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
                            docker push $DOCKER_USR/$APP_NAME:$IMAGE_TAG
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
